name: Build Baryte OS
on:
  push:
    branches: 
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"  # Weekly rebuild on Sundays

env:
  IMAGE_NAME: baryte-os
  IMAGE_REGISTRY: ghcr.io/betim-hodza

jobs:
  build-container:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.1.0')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile  # Specify the Containerfile explicitly
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tags.outputs.SHA_SHORT }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tags.outputs.VERSION }}
          labels: |
            org.opencontainers.image.created=${{ steps.generate-tags.outputs.BUILD_DATE }}
            org.opencontainers.image.version=${{ steps.generate-tags.outputs.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}

  build-iso:
    needs: build-container
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y podman qemu-utils xorriso

      - name: Generate ISO
        run: |
          podman pull quay.io/centos-boot/bootc-image-builder:latest
          podman run --rm --privileged \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            -v ${{ github.workspace }}:/tmp/build \
            quay.io/centos-boot/bootc-image-builder:latest \
            --type iso \
            --output-dir /tmp/build \
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          ISO_FILE=$(ls *.iso)
          echo "ISO_FILE=${ISO_FILE}" >> $GITHUB_ENV

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ISO_FILE }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ISO as artifact
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v3
        with:
          name: baryte-os-iso
          path: ${{ env.ISO_FILE }}
          retention-days: 7